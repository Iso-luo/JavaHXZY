//继承！

1,面向对象内容回顾
	1， 类：
			----> 为描述生活中的一类事物，
				公共的属性  --->成员属性
				公共的功能  --->成员函数				
				构造函数   --作用--> 为了实例化类的对象
						1，函数名称必须和类型一模一样，没有返回值类型
						2，无参数构造函数，有参构造函数
						3, 就是为了创建 类的对象
		对象：
			---->类    抽象
			---->对象  具体
		
				类 ----》对象   实例化
					new
		
		面向对象思想：
			1，你用生活中的例子来解释下 面向对象思想
				1，随口即来:...
		
	
	2，封装思想
		1，我们把属性用private修饰起来
		2，get/set 方法 对外提供访问的接口
	
	
	
	3，面向对象中的关键字
		private  私有的      -->只能在本类中访问（出了这个类就访问不到这个属性 成员函数）
		public   公有的      -->在任何类中都能访问的到
		
		private  关键字使用的意义
			保护成员属性不能被外部直接访问，提高安全性
		
		this  --> 当前对象的引用
		
---------------
定义一个动物类（父类）：
//属性(private)
	year
	weight
	leg	
//constructor
	无参
	有参
//get/set
	
//功能
	吃 喝 睡  叫
	
定义一个 Dog类（子类）：
//属性(private)
	year
	weight
	leg
//constructor
	无参
	有参	
//get/set
//功能
	吃 喝 睡  叫
-----------------------------
面向对象3大特征（封装 继承 多态）
  相似的关系
类和类之间继承的关系 ： extends
	 子类 继承了 父类的所有（除了构造器）以外的
	 成员属性 成员方法 和其访问修饰符无关系
	 
继承的优点：
	子类继承父类的所有功能
	提高代码的复用型
	
子类在调用父类的构造函数时：
	super()语句必须放在构造函数的第一行！！否则会报错
		
方法的覆盖(重写)：
1，2个类之间必须有继承关系
2，方法的声明必须一模一样!!!!方法的实现重写,必须不一样
	访问修饰符 返回值类型+方法名字+(参数列表)  {} 
	           —————————————————————————————
	             ↑以上三个合称为 方法的声明！！
				 
3，子类的方法权限  > =  父类方法的权限

	访问修饰符：
		1，private        最小[它的最大权限指：只在本类中可以访问调用]
		2, protected      子类访问[它的最大权限指：只要是一个类的子类，就可以访问调用该类的属性或方法]
		3, default		  包级访问(一个java文件里面的所有class都在一个包里)[它的最大权限指：只要是在同一个包里面，就可以访问某个类的属性]	
		4, public         最大[它的最大权限指：没有限制范围，所有都能访问]
		包的举例：
		一下是两个不同的包，
		import java.util.Scanner(default x) default x指，只要是和这个x在同一个包里，就可以访问调用它，出了这个包就不行了
		
		import java.lang.interger() 这个包，就不能访问上面那个default x
				
方法的重载 overload：
	1.和返回值类型没有关系
	2.方法名字 必须一模一样
	3.参数列表 必须不一样
	4.实现 也不一样？？？？？？？？？？？？？？？？？？？？？？？
	举例：
	void a (){}
	int a(int x){}
	
方法的覆盖(重写，复写) override：		
	1,必须是子类和父类之间的关系
	2，方法的声明必须一模一样，
	   方法的实现必须不一样
	3,子类方法的权限  >= 父类方法的权限
	
		父类public--子类public
		父类包级权限default--子类public,default
		父类子集权限protected--子类public,default,protected
		父类private只能自己用？？？


